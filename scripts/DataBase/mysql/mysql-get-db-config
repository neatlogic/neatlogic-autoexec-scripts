#!/usr/bin/perl
use FindBin;
use lib "$FindBin::Bin/lib";
use lib "$FindBin::Bin/lib/perl-lib/lib/perl5";

package Mysql::Conf;

use strict;
use Getopt::Long;
use File::Basename;
use IO::File;
use File::Copy;
use File::Path qw(make_path);
use POSIX qw(strftime);
use File::Spec::Functions qw(catfile rel2abs);

use AutoExecUtils;

#Mysql option文件配置读取和修改，支持!include和!includedir
#支持多文件式的mysql配置的增加、修改，但不支持删除配置
#因为多文件配置，同一个section声明可以存在于多个文件中，所以新增的option会自动选择文件名和section名最为接近的文件进行相应的修改
sub new {
    my ( $pkg, $filePath ) = @_;

    my $self = {
        hasError       => 0,
        isChanged      => 0,                                              #标记在修改过程中，某个配置文件是否发生过修改
        ini            => { sectionComments => {}, optComments => {} },
        sectionFileMap => {},                                             #section和配置文件的关联，记录最佳的配置文件
        modified       => 0,                                              #从整体上标记配置是否发生过修改
        current        => undef                                           #当前的section名称
    };

    $self->{multipleOptions} = {
        'binlog-do-db'     => 1,
        'binlog-ignore-db' => 1,
        'plugin-load'      => 1
    };

    #记录已经修改过的可重复option
    $self->{multipleOptionsModifed} = {};

    bless( $self, $pkg );

    if ( defined($filePath) ) {
        if ( not -e $filePath ) {
            $self->{hasError} = 1;
            print("ERROR: $filePath not exists.\n");
        }
        if ( not -f $filePath ) {
            $self->{hasError} = 1;
            print("ERROR: $filePath is not a file.\n");
        }

        $self->{rootDir} = dirname($filePath);
        my $dateTimeStr = strftime( "%Y%m%d-%H%M%S", localtime() );
        my $backupDir   = "$filePath.$dateTimeStr";
        $self->{backupDir} = $backupDir;
        if ( not -e $backupDir ) {
            mkdir($backupDir);
        }
    }

    if ( defined($filePath) ) {
        $self->__read_config( $filePath, 'file' );
    }

    return $self;
}

sub getFileContent {
    my ( $self, $filePath ) = @_;
    my $content;

    if ( -f $filePath ) {
        my $size = -s $filePath;
        my $fh   = new IO::File("<$filePath");

        if ( defined($fh) ) {
            $fh->read( $content, $size );
            $fh->close();
        }
        else {
            die("ERROR: File:$filePath open failed, $!.\n");
        }
    }

    return $content;
}

sub getConfig {
    my ( $self, $confTxt ) = @_;

    if ( defined($confTxt) ) {
        $self->{ini} = { sectionComments => {}, optComments => {} };
        $self->__read_config( $confTxt, 'text' );
    }

    return $self->{ini};
}

sub __read_config {
    my ( $self, $path, $what ) = @_;

    if ( not defined($what) ) {
        $what = 'file';
    }

    my $content = "";

    # store the names to skip when reading directories
    my %skip;
    my @skip_names = qw(. ..);
    @skip{@skip_names} = (1) x @skip_names;

    if ( $what eq 'text' ) {
        $content = $path;
        $self->__parseINI( $content, $path );
    }
    elsif ( $what eq "file" ) {
        if ( not -f ($path) ) {
            $self->{hasError} = 1;
            print("ERROR: $path is not a file.\n");
        }

        $content = $self->getFileContent($path);
        $self->__parseINI( $content, $path );
    }
    elsif ( $what eq "dir" ) {
        opendir( my $dirh, $path ) or return "";
        if ( not defined($dirh) ) {
            $self->{hasError} = 1;
            print("ERROR: Directory not exists.\n");
        }

        while ( my $file = readdir($dirh) ) {

            # skip invisible files and directories we shouldn't
            # recurse into, like ../ or CVS/
            next if $skip{$file} or index( $file, "." ) == 0;

            my $filepath = catfile( $path, $file );

            if ( -f $filepath ) {
                __read_config( $self, $filepath, 'file' );
            }
            elsif ( -d $filepath ) {
                __read_config( $self, $filepath, 'dir' );
            }
        }

        closedir($dirh);
    }
}

sub __parseINI {
    my ( $self, $content, $filePath ) = @_;

    my $baseDir         = dirname($filePath);
    my $ini             = $self->{ini};
    my $sectionComments = $ini->{sectionComments};
    my $optComments     = $ini->{optComments};
    my $sectionFileMap  = $self->{sectionFileMap};
    my $current         = $self->{current};
    my $section         = {};

    my $comment = '';
    $content =~ s/^\s*|\s*$//g;
    foreach my $line ( split( /\n/, $content ) ) {
        $line =~ s/^\s*|\s*$//g;

        # handle comments
        if ( $line =~ /^[;#]/ ) {
            $comment = $comment . $line . "\n";
            next;
        }
        elsif ( $line eq '' ) {
            $comment = $comment . "\n";
            next;
        }

        # handle includes
        if ( $line =~ /^\s*!include(dir)?\s+(.+)\s*$/ ) {
            my $incDir   = $1;
            my $filePath = $2;
            if ( defined($incDir) ) {
                $self->__read_config( rel2abs( $filePath, $baseDir ), 'dir' );
            }
            else {
                $self->__read_config( rel2abs( $filePath, $baseDir ), 'file' );
            }
            next;
        }

        #handle section
        elsif ( $line =~ /^\s*\[(.*)\]\s*$/ ) {
            $current = $1;
            if ( defined( $ini->{$current} ) ) {

                #如果已经存在section，那么此section在多个文件中有配置，计算最匹配的文件，用于配置增加的option
                $section = $ini->{$current};
                my $preSectionFile = basename( $sectionFileMap->{$current} );
                my $curSectionFile = basename($filePath);
                if ( not $preSectionFile =~ /$current/ and $curSectionFile =~ /$current/ ) {
                    $sectionFileMap->{$current} = $filePath;
                }
                elsif ( length($curSectionFile) < length($preSectionFile) ) {
                    $sectionFileMap->{$current} = $filePath;
                }
            }
            else {
                my $newSection = {};
                $ini->{$current} = $newSection;
                $section = $newSection;

                if ( defined($comment) and $comment ne '' ) {
                    my $thisComment = $comment;
                    $thisComment =~ s/^\s*|\s*$//g;
                    $sectionComments->{$current} = $thisComment;
                    undef($comment);
                    $comment = '';
                }
                $sectionFileMap->{$current} = $filePath;
            }
            next;
        }

        if ( $line !~ /=/ ) {
            $line = join( '=', $line, 1 );
        }

        my ( $k, $v ) = split( /\s*=\s*/, $line, 2 );
        my $oldV = $section->{$k};

        my $multipleOptions = $self->{multipleOptions};

        #mysql的配置中binlog-do-db和binlog-ignore-db以及plugin-load是可以重复配置的
        if ( $multipleOptions->{$k} ) {
            if ( ref($oldV) eq "ARRAY" ) {
                push( @$oldV, $v );
            }
            else {
                $section->{$k} = [$v];
            }
        }
        else {
            $section->{$k} = $v;
        }

        if ( defined($comment) and $comment ne '' ) {
            my $thisComment = $comment;
            $thisComment =~ s/^\s*|\s*$//g;
            $optComments->{"$current.$k"} = $thisComment;
            undef($comment);
            $comment = '';
        }
    }
}

package Main;
use strict;
use POSIX;
use Cwd;
use Socket;
use Getopt::Long;
use File::Basename;
use File::Spec::Functions qw(catfile rel2abs);
use AutoExecUtils;

sub usage {
    my $pname = $FindBin::Script;

    print("$pname --OS_USER <OS_USER> --PORT <LISTEN PORT>\n");
    exit(1);
}

sub getExecutablePath {
    my ($pid)  = @_;
    my @uname  = uname();
    my $ostype = $uname[0];
    $ostype =~ s/\s.*$//;

    my $executablePath;
    if ( $ostype eq 'Windows' ) {
        my $procTxt = `wmic process where "ProcessID=$pid" get ExecutablePath}`;
        my @lines   = split( /\n/, $procTxt );
        if ( scalar(@lines) >= 2 ) {
            $executablePath = $lines[1];
            $executablePath =~ s/^\s*|\s*$//g;
        }
    }
    else {
        if ( -e "/proc/$pid/exe" ) {
            $executablePath = readlink("/proc/$pid/exe");
        }
    }

    return $executablePath;
}

sub parseCommandOpts {
    my ( $pid, $command ) = @_;

    my $opts       = {};
    my @items      = split( /[\s"]+--/, $command );
    my $mysqldPath = $items[0];
    $mysqldPath =~ s/^\s*|\s*$//g;
    $mysqldPath =~ s/^"|"$//g;

    #$mysqldPath =~ s/\\/\//g;

    if ( not -e $mysqldPath and not -e "$mysqldPath.exe" ) {
        $mysqldPath = getExecutablePath($pid);
    }

    $mysqldPath =~ s/\\/\//g;
    $opts->{mysqldPath} = $mysqldPath;
    if ( $mysqldPath =~ /^(.*?)[\/\\]bin[\/\\]mysqld/ or $mysqldPath =~ /^(.*?)[\/\\]sbin[\/\\]mysqld/ ) {
        $opts->{mysqlHome} = $1;
    }

    for ( my $i = 1 ; $i < scalar(@items) ; $i++ ) {
        my $item = $items[$i];
        my ( $key, $val ) = split( '=', $item );
        $opts->{$key} = $val;
    }

    if ( not defined( $opts->{mysqlHome} ) ) {
        $opts->{mysqlHome} = $opts->{basedir};
    }
    if ( not defined( $opts->{'defaults-file'} ) ) {
        $opts->{configFile} = '/etc/my.cnf';
    }

    return $opts;
}

sub getMysqldConf {
    my ( $port, $osUser ) = @_;

    my $mysqldConf = {};
    my $isRunning  = 0;
    my $pid;
    my $listenLine = `netstat -nlp |grep :${port} `;
    print("netstat -nlp |grep :${port}\n");
    print( $listenLine, "\n" );
    $listenLine =~ s/^\s*|\s*$//g;
    if ( $listenLine eq '' ) {
        print("WARN: Mysql not listen on port $port.\n");
    }
    elsif ( $listenLine =~ /LISTEN\s+(\d+)/ ) {
        $pid       = $1;
        $isRunning = 1;
    }

    if ( defined($pid) ) {
        my $procInfoLine = `ps -p $pid -o user,args | tail -1 `;
        $procInfoLine =~ s/^\s*|\s*$//g;
        my $command = $procInfoLine;
        if ( defined($osUser) and $osUser ne '' and $command !~ s/^$osUser\s+// ) {
            print("ERROR: Mysql listen on port:$port not running on os user:$osUser.\n");
        }
        else {
            my $cmdOpts = parseCommandOpts( $pid, $command );

            my $confFile  = $cmdOpts->{configFile};
            my $mysqlConf = Mysql::Conf->new($confFile);
            my $ini       = $mysqlConf->getConfig();

            $mysqldConf = $ini->{mysqld};
            while ( my ( $k, $v ) = each(%$cmdOpts) ) {

                #为了变量名命名规范，把减号统一换成下划线
                $k =~ s/-/_/g;
                $mysqldConf->{$k} = $v;
            }
        }
    }

    $mysqldConf->{isRunning} = $isRunning;

    return $mysqldConf;
}

sub getDataDirConf {
    my ($dataDir) = @_;

    my $dataDirInfo = {};

    my $mountsMap  = {};
    my $dfTxt      = `mount`;
    my @mountLines = split( /\n/, $dfTxt );
    my $linesCount = scalar(@mountLines);
    for ( my $i = 0 ; $i < $linesCount ; $i++ ) {
        my $line = $mountLines[$i];
        $line =~ s/^\s*|\s*$//g;
        if ( $line =~ /^(.*?)\s+on\s+(.*?)\s+type\s/ ) {
            my $fileSystem = $1;
            my $mountPoint = $2;
            $mountsMap->{$mountPoint} = $fileSystem;
        }
    }

    my $matchedFileSys;
    my $matchedMountPoint;
    my $rel2MountPointPath;
    my $matchLen = 0;

    while ( my ( $mountPoint, $fileSys ) = each(%$mountsMap) ) {
        if ( $dataDir =~ /^$mountPoint/ ) {
            my $mountPointLen = length($mountPoint);
            if ( $mountPointLen > $matchLen ) {
                $matchLen           = $mountPointLen;
                $matchedMountPoint  = $mountPoint;
                $rel2MountPointPath = substr( $dataDir, length($matchedMountPoint) );
                $matchedFileSys     = $fileSys;
            }
        }
    }

    if ( defined($matchedFileSys) ) {
        my $lvPath;
        my $lvName;
        my $vgName;
        print("lvdisplay '$matchedFileSys'\n");
        my $lvTxt = `lvdisplay '$matchedFileSys'`;
        if ( $? == 0 ) {
            print( $lvTxt, "\n" );
            foreach my $line ( split( /\n/, $lvTxt ) ) {
                if ( $line =~ /^\s*LV Path\s+(.*?)$/ ) {
                    $lvPath = $1;
                }
                elsif ( $line =~ /^\s*LV Name\s+(.*?)$/ ) {
                    $lvName = $1;
                }
                elsif ( $line =~ /^\s*VG Name\s+(.*?)$/ ) {
                    $vgName = $1;
                }
            }

            $dataDirInfo->{lvName}         = $lvName;
            $dataDirInfo->{lvMountPoint}   = $matchedMountPoint;
            $dataDirInfo->{rel2MountPoint} = $rel2MountPointPath;
            $dataDirInfo->{vgName}         = $vgName;
            $dataDirInfo->{lvPath}         = $lvPath;
        }
        else {
            print("INFO: Directory:$dataDir is not on a lvm volume.\n");
        }
    }

    return $dataDirInfo;
}

sub main {
    my $opts = {};
    GetOptions(
        $opts, qw{
            OS_USER=s
            PORT=s
        }
    );

    my $hasOptErr = 0;

    my $osUser = $opts->{OS_USER};
    my $port   = $opts->{PORT};

    if ( not defined($port) or $port eq '' ) {
        $hasOptErr = 1;
        print("ERROR: Must defined mysql listen port by option --port.\n");
    }

    if ( $hasOptErr == 1 ) {
        usage();
    }

    my $hasError    = 0;
    my $mysqldConf  = getMysqldConf( $port, $osUser );
    my $dataDir     = $mysqldConf->{datadir};
    my $dataDirInfo = getDataDirConf($dataDir);
    while ( my ( $k, $v ) = each(%$dataDirInfo) ) {

        #为了变量名命名规范，把减号统一换成下划线
        $k =~ s/-/_/g;
        $mysqldConf->{$k} = $v;
    }

    if ( not defined( $mysqldConf->{server_id} ) ) {
        $mysqldConf->{server_id} = '';
    }

    if ( not defined( $mysqldConf->{log_bin} ) ) {
        $mysqldConf->{log_bin} = '';
    }

    AutoExecUtils::saveOutput($mysqldConf);
    return $hasError;
}

exit main();

1;
