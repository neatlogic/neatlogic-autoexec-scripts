#!/bin/bash

usage() {
    pname=$(basename $0)
    echo "Usage:"
    echo "$pname --rootpwd <root password> --reinstall <Uninstall first and then install> --mycnf <mysql config file> --inspkg <install rpm pkg>"
    exit -1
}

parseOpts() {
    OPT_SPEC=":h-:"
    while getopts "$OPT_SPEC" optchar; do
        case "${optchar}" in
        -)
            case "${OPTARG}" in
            rootpwd)
                rootpwd="${!OPTIND}"
                OPTIND=$(($OPTIND + 1))
                ;;
            reinstall)
                reinstall="${!OPTIND}"
                OPTIND=$(($OPTIND + 1))
                ;;
            mycnf)
                mycnf="${!OPTIND}"
                OPTIND=$(($OPTIND + 1))
                ;;
            inspkg)
                inspkg="${!OPTIND}"
                OPTIND=$(($OPTIND + 1))
                ;;
            *)
                if [ "$OPTERR" = 1 ] && [ "${OPT_SPEC:0:1}" != ":" ]; then
                    echo "Unknown option -- ${OPTARG}" >&2
                fi
                ;;
            esac
            ;;
        h)
            usage
            exit 2
            ;;
        *)
            if ["$OPTERR" != 1 ] || [ "${OPT_SPEC:0:1}" = ":" ]; then
                echo "Non-option argument: '-${OPTARG}'" >&2
            fi
            ;;
        esac
    done
}
parseOpts "$@"

function DO_CMD() {
    echo Exec command: $@
    $@

    if [ $? != 0 ]; then
        HAS_ERROR=$?
        echo ERROR: Execute failed.
        exit $HAS_ERROR
    else
        echo FINE: Execute success.
    fi
}

function install() {
    id mysql
    if [ $? != 0 ]; then
        echo "INFO: Add user mysql"
        DO_CMD useradd mysql
    fi
    DO_CMD mkdir -p /home/mysql/data
    DO_CMD mkdir -p /home/mysql/log
    DO_CMD chown -R mysql:mysql /home/mysql

    DO_CMD cp $mycnf /etc/my.cnf

    DO_CMD cp $inspkg .

    filename=$(echo $(basename $inspkg))

    DO_CMD tar -xvzf $filename

    DO_CMD rpm -Uvh *.rpm

    echo "INFO: Begin to init mysql db"
    DO_CMD /usr/bin/mysql_install_db

    DO_CMD chown -R mysql:mysql /var/lib/mysql

    DO_CMD setenforce 0

    DO_CMD service mysql start

    #mysql 脚本运行，注意密码处理
    echo "INFO: modify mysql user password and create new users."
    mysql_secret=$(awk '/password/{print $NF}' /root/.mysql_secret)
    mysql --connect-expired-password -uroot -p$mysql_secret <<EOF
set password=password('$rootpwd');
use mysql;
select host,user,password from user;
update user set host='%' where user='root' and host='localhost';
flush privileges;
EOF
    if [ $? != 0 ]; then
        echo "ERROR: modify mysql password failed."
        exit 1
    else
        echo "INFO: modify mysql password succeed."
    fi

    DO_CMD chkconfig mysql on
    mysqlExists=$(chkconfig --list | grep mysql)
    if [ -z "$mysqlExists" ]; then
        echo "ERROR: mysql service not exists, install failed."
        exit 1
    fi

}

function uninstall() {
    #卸载现有mysql
    service mysql stop 2>&1 >/dev/null
    mysqlPids=$(ps -efww | grep mysql | grep -v grep | grep -v installmysql | awk '{print $2}')
    if [ ! -z "$mysqlPids" ]; then
        DO_CMD kill -9 $mysqlPids
    fi
    if [ -e "/root/.mysql_secret" ]; then
        DO_CMD rm /root/.mysql_secret
    fi
    if [ -e "/var/lib/mysql" ]; then
        DO_CMD rm -rf /var/lib/mysql
    fi
    if [ -e "/home/mysql/data" ]; then
        DO_CMD rm -rf /home/mysql/data
    fi
    if [ -e "/home/mysql/log" ]; then
        DO_CMD rm -rf /home/mysql/log
    fi
    for mysqlRpm in $(rpm -qa | grep -i mysql); do
        DO_CMD rpm -e --nodeps $mysqlRpm
    done
    for mariadbRpm in $(rpm -qa | grep -i mariadb); do
        DO_CMD rpm -e --nodeps $mariadbRpm
    done
    for numactlRpm in $(rpm -qa | grep -i numactl); do
        DO_CMD rpm -e --nodeps $numactlRpm
    done

}

function checkInstalled() {
    mysqlPids=$(ps -efww | grep mysql | grep -v grep | grep -v installmysql | awk '{print $2}')
    if [ ! -z "$mysqlPids" ]; then
        echo "INFO: mysql have already installed ."
        if [ $reinstall == "0" ]; then
            exit 0
        else
            uninstall
            install
        fi
    else
        install
    fi
}

if [[ ! -n "$rootpwd" || ! -n "$reinstall" || ! -n "$mycnf" || ! -n "$inspkg" ]]; then
    usage
fi

checkInstalled

exit $HAS_ERROR
