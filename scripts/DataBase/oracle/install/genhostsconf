#!/usr/bin/python3 -u
# -*- coding: utf-8 -*-

import os
import sys
import re
import argparse
import json
import ipaddress

import AutoExecUtils


def usage():
    # 帮助信息
    pname = os.path.basename(__file__)
    print(pname + "--racname <RAC name> --pubnet <public net> --privnet <private net> --viplist <vip json> --scanip <scan ip> --nodesipinfo <all nodes ip json obj>")


if __name__ == "__main__":
    # 参数处理

    parser = argparse.ArgumentParser()
    parser.add_argument('--racname', default='', help='Oracle rac name')
    parser.add_argument('--pubnet', default='', help='Public net, example: 10.10.10.0/24')
    parser.add_argument('--privnet', default='', help='Private net, example: 192.168.10.0/24')
    parser.add_argument('--viplist', default='', help='Vip list, example: 10.10.10.120,10.10.10.121')
    parser.add_argument('--scaniplist', default='', help='Scan IP, example: 10.10.10.128')
    parser.add_argument('--nodesipinfo', default='{}', help='All nodes ip information')

    args = parser.parse_args()

    hasOptError = 0
    if args.racname == '':
        print("ERROR: Must defined rac name by option --racname")
        hasOptError = 1
    if args.pubnet == '':
        print("ERROR: Must defined public net by option --pubnet, example: --pubnet 10.10.10.0/24\n")
        hasOptError = 1
    if args.privnet == '':
        print("ERROR: Must defined private net by option --privnet, example: --privnet 192.168.10.0/24\n")
        hasOptError = 1
    if args.viplist == '':
        print("ERROR: Must defined scan ip by option --viplist, example: --viplist 10.10.10.110,10.10.10.111\n")
        hasOptError = 1
    if args.scaniplist == '':
        print("ERROR: Must defined scan ip by option --scaniplist, example: --scaniplist 10.10.10.120,10.10.10.121\n")
        hasOptError = 1

    if hasOptError == 1:
        usage()

    racName = args.racname

    pubNetTxt = args.pubnet
    pubNet = ipaddress.ip_network(pubNetTxt)

    privNetTxt = args.privnet
    privNet = ipaddress.ip_network(privNetTxt)

    # 传入的集群节点的管理IP获取和排序
    nodesIpInfo = json.loads(args.nodesipinfo)
    nodes = list(nodesIpInfo.keys())
    nodes.sort()
    nodesCount = len(nodes)

    # vip 地址参数分析和排序
    vipList = ()
    vipListTxt = args.viplist
    spaceReg = re.compile(r"\s+")
    vipListTxt = spaceReg.sub('', vipListTxt)
    if vipListTxt.startswith('{'):
        vipListJson = json.loads(vipListTxt)
        vipList = vipListJson.get('content').split("\n")
    else:
        vipList = vipListTxt.split(',')
    vipList.sort()

    vipsCount = len(vipList)

    # scan ip 地址参数分析和排序
    scanIpList = ()
    scanIpListTxt = args.scaniplist
    spaceReg = re.compile(r"\s+")
    scanIpListTxt = spaceReg.sub('', scanIpListTxt)
    if scanIpListTxt.startswith('{'):
        scanIpListJson = json.loads(scanIpListTxt)
        scanIpList = scanIpListJson.get('content').split("\n")
    else:
        scanIpList = scanIpListTxt.split(',')
    scanIpList.sort()

    hasError = 0
    # Check vip in public net
    for vip in vipList:
        if ipaddress.ip_address(vip) not in pubNet:
            hasError = 1
            print("ERROR: VIP:%s not in public network %s\n" % (vip, pubNetTxt))

    # Check scanip in public net
    for scanIp in scanIpList:
        if ipaddress.ip_address(scanIp) not in pubNet:
            hasError = 1
            print("ERROR: SCAN IP:%s not in public network %s\n" % (scanIp, pubNetTxt))

    if vipsCount != nodesCount:
        hasError = 1
        print("ERROR: VIP list count:%s, not equal nodes count:%s" % (vipsCount, nodesCount))
        print("VIP:")
        print("\n".join(vipList))
        print("Nodes:")
        print("\n".join(nodes))

    if hasError != 0:
        sys.exit(3)

    hostConfTxt = ''

    pubNicName = None
    privNicName = None

    pubIpConf = ()
    privIpConf = ()
    vipConf = ()
    idx = 1
    for node in nodes:
        pubIp = None
        privIp = None

        for nodeIpInfo in nodesIpInfo.get(node):
            nicName = nodeIpInfo.get('NIC')
            ip = nodeIpInfo.get('IP')
            prefixLen = nodeIpInfo.get('NetMask')

            if ipaddress.ip_address(ip) in pubNet:
                if pubIp is None:
                    pubIp = ip
            elif ipaddress.ip_address(ip) in privNet:
                if privIp is None:
                    privIp = ip

        if pubIp is None:
            hasError = 1
            print("ERROR: Node:%s does not config public network:%s ip" % (node, pubNetTxt))
        else:
            pubIpConf.append("%s\t%s%s" % (pubIp, racName, idx))
            vipConf.append("%s\t%s-vip%s" % (vipList[idx], racName, idx))

        if privIp is None:
            hasError = 1
            print("ERROR: Node:%s does not config private network:%s ip" % (node, privNetTxt))
        else:
            privIpConf.append("%s\t%s-priv%s" % (privIp, racName, idx))

        idx = idx + 1

    scanIpConf = ()
    for scanIp in scanIpList:
        scanIpConf.append("%s\t%s-scan" % (scanIp, racName))

    hostConfTxt = "\n".join(pubIpConf) + "\n".join(vipConf) + "\n".join(privIpConf) + "\n".join(scanIpConf)

    out = {}
    out['hostConfTxt'] = hostConfTxt
    AutoExecUtils.saveOutput(out)

    sys.exit(hasError)
